mport nltk
nltk.download('stopwords') # Descargar el paquete de tokenización
from nltk.tokenize import sent_tokenize, word_tokenize
from nltk.corpus import stopwords
from nltk.probability import FreqDist

# Tokenizar el texto
text = "Cuando usas una aplicación móvil o web, seguramente has notado que esta en ocasiones tarda un momento en mostrarte toda la información. Lo que sucede aquí es que tu aplicación hace una petición de esta información, como pueden ser tus datos de usuario. Esta petición llega a lo que nosotros conocemos como un servidor, el cual se conecta a una base de datos. Esto se hace ya que si tu aplicación tuviera comunicación directa con la base de datos, podríamos tener huecos de seguridad con el que toda la información estaría en riesgo. Un desarrollador backend es aquel encargado de construir la parte de la aplicación que funciona en el servidor, es decir, la que comunica los datos con el cliente. Con este vamos a definir permisos y las respuestas de datos que se generan cuando un usuario interactúa con el cliente, es decir, con el frontend. Este servidor es la parte que los usuarios de tu aplicación nunca verán y con la que nunca tendrán que interactuar de forma directa. Para los desarrolladores backend, según la encuesta de Stack Overflow del año 2022, se generan en promedio un salario de 68.355 dólares anuales y solamente en los Estados Unidos los salarios ascienden a los 150.000 dólares al año. Hola mundo y bienvenidos a este video. Antes de comenzar, las siguientes son solo las habilidades técnicas. Hay una serie de habilidades blandas que también debes de desarrollar para llegar a ser un buen desarrollador, solo que en este video acotaremos solo aquellas habilidades técnicas que te servirán para ingresar como desarrollador backend a la industria. Y comenzaremos con lo primero, los lenguajes de programación. Para desarrollar el backend de una aplicación, contarás con una variedad de lenguajes de programación que podrás utilizar para construirlo, a diferencia del desarrollo frontend o el desarrollo móvil, que están sujetos a ciertos lenguajes específicos para poder construir aplicaciones. Entre algunos de los más populares que puedes utilizar se encuentran Python, Rust, Java, Ruby, PHP, Node.js, Go o C-Shark. Para el backend, puedes hacer la elección para aprender entre algunos de estos lenguajes, dependiendo de las necesidades de tu proyecto. Ya sea que quieras construir una aplicación en tiempos más cortos o que la respuesta de tu servidor sea más rápida. Otra de las ventajas que tiene aprender alguno de estos lenguajes es que no son solo para construir backend, ya que podrás ocuparlos en otros campos de aplicación como por ejemplo inteligencia artificial o desarrollo de videojuegos. Cuando domines los conceptos fundamentales del lenguaje que elegiste, seguirá a que aprendas a construir tu primera API. La siguiente es una herramienta que es fundamental y prácticamente obligatoria que aprendas. Esta es Git. Git es un sistema de control de versiones que nos permite guardar el progreso del código que escribamos. Y conforme nuestros proyectos vayan creciendo, lo usaremos para guardar etapas por etapa de estos. Cada una de estas etapas las llamaremos commits y las podríamos ver como checkpoints o puntos de control a los que podemos regresar cada vez que lo necesitemos. Y no solo al anterior, sino que a toda la historia de cambios que hayamos guardado, pudiendo viajar en el tiempo hacia adelante o atrás en nuestros proyectos según lo necesitemos. Un ejemplo de esto es, si llegáramos a romper algo en nuestras aplicaciones por alguna modificación, siempre podemos regresar a un punto donde todo funcionaba, para comparar qué sucedió y hacer las modificaciones pertinentes a la versión actualizada. O en caso de que lo necesitemos, podemos volver a comenzar desde cualquiera de estos commits. El otro beneficio de usar esta herramienta es que nos permitirá trabajar de manera colaborativa con otros desarrolladores. Esto se logra sumando una herramienta como GitHub, GitLab o Bitpacker, que nos permiten alojar nuestros repositorios, enviar revisiones, subir y descargar cada uno de los cambios que hagan nuestros compañeros de equipo. Ahora, si quieres aprender a utilizar esta herramienta, en este canal de YouTube tenemos un curso totalmente gratuito. Te dejamos la tarjeta y el link en la descripción. Una API es el puente de comunicación a través del cual se intercambia la información entre las peticiones del cliente y las respuestas del servidor. En esta realizarás también las conexiones con las bases de datos. Con las APIs aprenderás las primeras acciones fundamentales, las cuales son leer, escribir, actualizar y borrar, o también conocido como CRUD por sus siglas en inglés. El cómo te comunicarás en las distintas partes de tu aplicación será mediante una API. Y deberás aprender a hacerlo con uno o más de los siguientes protocolos. REST, la más común hoy en día que usa JSON para el envío de información. Globe, que hace uso de XML o GraphQL. Esta última fue creada por Facebook y tiene algunos beneficios sobre las anteriores. Y a continuación vamos a hablar sobre la mejor opción que existe actualmente para poder encontrar el trabajo remoto de tus sueños y también los patrocinadores de este video, ARK. ARK es una plataforma enfocada 100% en el trabajo remoto, donde empresas de todo el mundo aplican a ti. Así es, escuchaste bien. Tú no aplicas a las empresas. Las empresas aplican a ti, invitándote a entrevistas, sin aplicaciones o reclutadores de por medio. ARK se encargará de mostrarle tu perfil a startups y grandes empresas que están buscando trabajadores 100% remoto. Y dentro de 14 días, tú ya habrás recibido ofertas laborales. ARK se encargará de calificarte a ti mediante una entrevista en inglés y podrás elegir entre una entrevista técnica o un desafío de código. Además que podrás acceder a un equipo que te va a ayudar a ti a mejorar tu perfil online. Da el primer paso para poder encontrar el trabajo remoto de tus sueños y créate una cuenta en ARK. Link abajo en la descripción. Ya que has construido tu API, pasemos a los siguientes conceptos que debes aprender. En tu código backend, además de definir las conexiones, deberás de construir las peticiones a la base de datos para entregar la información que el cliente necesita. Por lo que deberás construir las queries a través de un lenguaje de consultas, como lo es SQL, y de esta manera obtener dicha información de la manera lo más óptima posible. De estas, existen dos tipos de bases de datos, las relacionales y las no relacionales. Las bases de datos relacionales utilizan distintos tipos de gestores de datos para poder acceder a estos, y dentro de los cuales podrás encontrar algunos, como por ejemplo MySQL, este siendo el más común y de los más solicitados en el mercado laboral. Y tenemos un curso gratuito para aprender esta tecnología. Te dejamos la tarjetita y el link en la descripción. Apréndelo, te conviene. El segundo es PostgreSQL, siendo extremadamente parecido pero con algunas funciones extendidas sobre el lenguaje SQL. Y el tercero, MariaDB. Y las bases de datos no relacionales deberás aprender por lo menos una de las siguientes, como MongoDB, Redis, Cassandra o Neo4j. Una vez que ya aprendiste sobre cómo comunicarte con las bases de datos, lo siguiente será aprender estructuras de datos. Estas son básicamente formas en las que podrás guardar la información en memoria, con el fin de que esta pueda ser mejor enviada al cliente o procesada para un uso posterior. Algunas de las estructuras de datos más conocidas son los arrays, las pilas, colas, listas enlazadas, hash maps, árboles y grafos. Déjanos un comentario si quieres que hablemos sobre estructuras de datos en este canal. Y por segundo, deberás aprender de algoritmos para aprender a manipular estas estructuras de datos y el flujo de la información para poder resolver problemas de manera más eficiente, para una óptima y rápida respuesta del servidor para el lado del cliente. Podrías aprender en este punto sobre complejidad algorítmica, complejidad espacial y la notación Big O para analizar y crear mejores soluciones con tu código. Ahora que has aprendido las bases fundamentales de tu lenguaje de programación, cómo almacenar y solicitar información y cómo generar mejores soluciones, uno de los siguientes pasos, y posiblemente ya lo has ocupado antes para construir una API, es que deberás aprender a utilizar un framework o una librería. Estas son soluciones que la comunidad o alguna organización ha desarrollado en los que nos ofrecen formas de trabajo estandarizadas, en las que múltiples problemas comunes ya han sido solucionados, ofreciéndonos formas fáciles de poder escribir código. De no ser por estos tendrías que escribir todo de manera manual, retrasando mucho tu tiempo de desarrollo. Así que aprende y usa los frameworks, te conviene. Por mencionar algunos lenguajes y sus respectivos frameworks, tenemos a Node con Express y Nest JS, Python con Flask, FastAPI o Django, Ruby con Rails, PHP con Laravel o Symfony, Java con Spring, C Sharp y C++ con.NET. Como nuestro último punto del día tenemos a los ORM, o también conocidos como Object Relational Mapping. Estas son tecnologías que podemos instalar en nuestros proyectos, los cuales han abstraído la parte de las consultas, es decir, no tendremos que escribir consultas completas como lo haríamos en SQL, sino que los usaremos como métodos, como parte de un modelo, el cual incluirá la estructura de cada objeto que guardaremos en la base de datos, permitiéndonos escribir mucho más rápido los servicios de nuestra aplicación. Estos últimos serían el conjunto de peticiones que podremos hacer a un servidor, así como de la conexión a la base de datos, de ayudarnos a construir las bases de datos en cuanto a su estructura a través de migraciones y tener un historial de cómo ha evolucionado esta a través del tiempo, permitiéndonos tener control de esto. Esto no nos evita que tengamos que aprender el lenguaje de consultas, sino que nos ayudará a ahorrarnos tiempo al generar las consultas más comunes en una API, junto con las configuraciones de sus respectivas relaciones 1 a 1, 1 a muchos o muchos a muchos de una manera más sencilla. Para consultas más complejas o específicas, podremos utilizar SQL para construir las queries necesarias para que funcione nuestra aplicación. Si no sabes SQL y todo lo anterior que te dije parece chino, el link a mi curso de SQL está en la descripción. Entre algunos ORM que puedes aprender se encuentran Mongoose, SQLite o TypeORM en JavaScript, Hibernate en Java, Doctrine en PHP, Dapper en.NET o Django que incluye un ORM en Python. ¿Qué lenguaje elegirías tú para hacer desarrollo backend? ¿Y qué ventajas les encuentras? ¿Qué otro conocimiento se encuentras fundamental para ser un desarrollador backend? Déjame tu respuesta o, como buen milenia, tu reclamo en la caja de comentarios. Y este fue el video de hoy. Si te gustó, recuerda golpear mucho al maldito del botón de me gusta. Si te encantó, considera suscribirte a este canal. Déjame un comentario acá abajo sobre qué otro tipo de video te gustaría que yo hiciera. Y si deseas profundizar en alguna materia, acá abajo también te voy a dejar links con acceso a todos mis cursos. Hasta la próxima y chao mundo."
sentences = sent_tokenize(text)

# Calcular la frecuencia de las palabras
word_sent = [word_tokenize(s.lower()) for s in sentences]
stop_words = set(stopwords.words('spanish'))

# Calcular la frecuencia de las palabras
freq = FreqDist(word for words in word_sent for word in words if word not in stop_words)

# Seleccionar las palabras más relevantes
important_words = [pair[0] for pair in freq.items() if pair[1] > 1]

# Generar el resumen
summary = ' '.join(important_words)
print(summary)